/* Lib bezier-rs-ffi C++ bindings. */
/* Copyright Daan de Lange 2023-(current-year). */


#pragma once

/* Generated with cbindgen:0.26.0 */

/* Warning : this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

/// Cap type enum
enum class bezrsCapType {
  Butt,
  Round,
  Square,
};

/// Join type enum
enum class bezrsJoinType {
  Bevel,
  Mitter,
  Round,
};

/// Opaque internal shape data handle
/// (use only as pointer! allocated on rust side, needs to be freed properly)
struct bezrsShape;

/// A simple position wrapper (x, y)
struct bezrsPos {
  double x;
  double y;
};

struct bezrsBezierHandle {
  bezrsPos pos;
  bezrsPos in_bez;
  bezrsPos out_bez;
  bool hasOutBez(){
      return out_bez.x != pos.x && out_bez.y != pos.y;
  }
  bool hasInBez(){
      return out_bez.x != pos.x && out_bez.y != pos.y;
  }
};

using SizeTC = unsigned long;

/// Raw vector handle representing a bezier shape
/// Used for sending owned data from Rust to C++ in both directions.
struct bezrsShapeRaw {
  /// Ptr to std::vec<bezrsBezierHandle> (if c++ owned) or Vec<bezrsBezierHandle> (if rust owned)
  const bezrsBezierHandle *data;
  /// count of data items
  SizeTC len;
  /// if true, behave as shape, otherwise behave as path.
  bool closed;
};

struct bezrsRect {
  bezrsPos pos;
  bezrsPos size;
};

/// Raw vector of floats
/// Used for sending owned data from Rust to C++ in both directions.
struct bezrsFloatsRaw {
  /// Ptr to std::vec<float> (if c++ owned) or Vec<f64> (if rust owned)
  const double *data;
  /// count of data items
  SizeTC len;
};

extern "C" {

/// Create a shape instance in rust memory : needs to be freed afterwards. Also, `beziers_opt` needs to remain valid (and static) until freed.
bezrsShape *bezrs_shape_create(const bezrsShapeRaw *beziers_opt,
                               bool closed);

/// To destroy an internal shape handle when you don't need it anymore.
void bezrs_shape_destroy(bezrsShape *_bezier);

/// Inserts a bezier to the shape at a given position
void bezrs_shape_insert_bezier(bezrsShape *_shape, bezrsBezierHandle _bez, SizeTC _pos);

/// Appends a bezier to the shape
void bezrs_shape_append_bezier(bezrsShape *_shape, bezrsBezierHandle _bez);

/// Appends a bezier to the shape
SizeTC bezrs_shape_info_size(bezrsShape *_shape);

/// Appends a bezier to the shape
SizeTC bezrs_shape_info_segments(bezrsShape *_shape);

/// Reverses the winding order of bezier handles
void bezrs_shape_reverse_winding(bezrsShape *_shape);

/// To retrieve the data of an internal shape handle.
bezrsShapeRaw bezrs_shape_return_handle_data(bezrsShape *_shape);

/// Offset a shape. When the shape is winded clockwise : positive offset goes inside, negative is outside.
void bezrs_cubic_bezier_offset(bezrsShape *_shape,
                               double offset,
                               bezrsJoinType join_type,
                               double join_mitter);

/// Rotates the whole shape
void bezrs_shape_rotate(bezrsShape *_shape, double _angle, bezrsPos *_center_point);

/// Outlines a shape or path.
/// Important: Closed shapes will return a new shape instance, to be destroyed correctly.
bezrsShape *bezrs_shape_outline(bezrsShape *_shape,
                                double distance,
                                bezrsJoinType join,
                                bezrsCapType cap,
                                double miter_limit);

/// Returns the bounding box of the shape
bezrsRect bezrs_shape_boundingbox(bezrsShape *_shape);

/// Returns the inflection points on a shape
bezrsFloatsRaw bezrs_shape_inflections(bezrsShape *_shape);

/// Returns the local extrema points on a shape on multiple axis
bezrsFloatsRaw bezrs_shape_localextrema(bezrsShape *_shape);

/// Returns if a point is contained within a shape
bool bezrs_shape_containspoint(bezrsShape *_shape, bezrsPos _pos);

/// Returns positions where the shape self intersects
bezrsFloatsRaw bezrs_shape_selfintersections(bezrsShape *_shape,
                                             double _error_treshold,
                                             double _min_dist);

/// Returns the position on the shape from a t-value (0->1) using `evaluate()`.
bezrsPos bezrs_shape_posfromtvalue(bezrsShape *_shape, double _t);

/// Returns the position on the shape from a t-value (0->1) using `evaluate()`.
bezrsPos bezrs_shape_posfromtvalue_subpath(bezrsShape *_shape, uintptr_t _i, double _t);

/// Returns the normal on the shape from a t-value (0->1).
bezrsPos bezrs_shape_normalfromtvalue(bezrsShape *_shape, double _t);

/// Returns the tangent on the shape from a t-value (0->1).
bezrsPos bezrs_shape_tangentfromtvalue(bezrsShape *_shape, double _t);

/// Returns the curvature on the shape from a t-value (0->1).
double bezrs_shape_curvaturefromtvalue(bezrsShape *_shape, double _t);

/// Returns t-value of the projection of a position on the shape from a t-value (0->1). (finds closest point on shape)
bezrsPos bezrs_shape_project_pos(bezrsShape *_shape,
                                 bezrsPos _pos);

} // extern "C"
