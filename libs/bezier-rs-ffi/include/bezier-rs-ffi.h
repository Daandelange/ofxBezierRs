/* Lib bezier-rs-ffi C++ bindings. */
/* Copyright Daan de Lange 2023-(current-year). */


#pragma once

/* Generated with cbindgen:0.26.0 */

/* Warning : this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

/// Cap type enum
enum class bezrsCapType {
  Butt,
  Round,
  Square,
};

/// Join type enum
enum class bezrsJoinType {
  Bevel,
  Mitter,
  Round,
};

/// Opaque internal shape data handle
/// (use only as pointer! allocated on rust side, needs to be freed properly)
struct bezrsShape;

/// A simple position wrapper (x, y)
struct bezrsPos {
  double x;
  double y;
};

struct bezrsBezierHandle {
  bezrsPos pos;
  bezrsPos in_bez;
  bezrsPos out_bez;
  bool hasOutBez(){
      return out_bez.x != pos.x && out_bez.y != pos.y;
  }
  bool hasInBez(){
      return out_bez.x != pos.x && out_bez.y != pos.y;
  }
};

/// Raw vector handle representing a bezier shape
/// Used for sending owned data from Rust to C++ in both directions.
struct bezrsShapeRaw {
  const bezrsBezierHandle *data;
  /// count of data items
  uintptr_t len;
  /// if true, behave as shape, otherwise behave as path.
  bool closed;
};

extern "C" {

/// Create a shape instance in rust memory : needs to be freed afterwards.
bezrsShape *bezrs_shape_create(const bezrsShapeRaw *beziers_opt, bool closed);

/// To destroy an internal shape handle when you don't need it anymore.
void bezrs_shape_destroy(bezrsShape *_bezier);

/// Inserts a bezier to the shape at a given position
void bezrs_shape_insert_bezier(bezrsShape *_shape, bezrsBezierHandle _bez, uintptr_t _pos);

/// Appends a bezier to the shape
void bezrs_shape_append_bezier(bezrsShape *_shape, bezrsBezierHandle _bez);

/// Reverses the winding order of bezier handles
void bezrs_shape_reverse_winding(bezrsShape *_shape);

/// To retrieve the data of an internal shape handle.
bezrsShapeRaw bezrs_shape_return_handle_data(bezrsShape *_shape);

/// Offset a shape. When the shape is winded clockwise : positive offset goes inside, negative is outside.
void bezrs_cubic_bezier_offset(bezrsShape *_shape,
                               double offset,
                               bezrsJoinType join_type,
                               double join_mitter);

/// Rotates the whole shape
void bezrs_shape_rotate(bezrsShape *_shape, double _angle, bezrsPos *_center_point);

/// Outlines a shape or path.
/// Important: Closed shapes will return a new shape instance, to be destroyed correctly.
bezrsShape *outline(bezrsShape *_shape,
                    double distance,
                    bezrsJoinType join,
                    bezrsCapType cap,
                    double miter_limit);

} // extern "C"
